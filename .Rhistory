Group = "Worst"
)
)
## 3. Make the plot
plot_dat %>%
# Make a plot
ggplot(
aes(
reorder_within( # From tidytext
x = State,
by = -Estimate,
within = Measure
)
)
) +
geom_point(
aes(
y = Estimate,
color = Group
),
size = 3
) +
geom_errorbar(
aes(
ymin = Lower,
ymax = Upper,
color = Group
)
) +
scale_x_reordered() + # From tidytext
facet_wrap(
~Measure,
scales = "free",
labeller = label_wrap_gen()
) +
coord_flip() +
scale_color_manual(
values =
c(
"#5cbd55",
"#f56751"
)
) +
scale_y_continuous(
labels = function(x) paste0((x - 1) * 100, "%")
) +
theme(
panel.background = element_blank(),
panel.grid.major.x = element_line(color = "gray"),
strip.background = element_rect(color = "gray", fill = "white", linewidth = 1.2),
strip.text = element_text(size = 10, face = "italic"),
legend.title = element_blank(),
legend.text = element_text(size = 12, family = "Courier"),
legend.position = "top",
axis.text = element_text(size = 10),
axis.title = element_text(size = 14, family = "Courier"),
plot.title = element_text(size = 18, face = "bold.italic"),
plot.subtitle = element_text(size = 16, face = "italic"),
plot.title.position = "plot",
plot.caption = element_text(size = 7, face = "italic")
) +
xlab("State") +
ylab("Infection Rate Over Expected (95% CI)") +
labs(
title = "Top 5 Best/Worst U.S. States",
subtitle = "Hospital Associated Infections; CY 2021",
caption =
paste0(
"Best/worst hospitals ranked by the minimum/maximum of the upper/lower confidence limit, respectively",
"\n",
"Infection Rate Over Expected is 100 X (SIR - 1)",
"\n",
"SIR = Standardized Infection Ratio",
"\n",
"Data source: https://data.cms.gov/provider-data/dataset/k2ze-bqvw"
)
)
## 3. Make the plot
plot_dat %>%
# Make a plot
ggplot(
aes(
reorder_within( # From tidytext
x = State,
by = -Estimate,
within = Measure
)
)
) +
geom_point(
aes(
y = Estimate,
color = Group
),
size = 3
) +
geom_errorbar(
aes(
ymin = Lower,
ymax = Upper,
color = Group
)
) +
scale_x_reordered() + # From tidytext
facet_wrap(
~Measure,
scales = "free",
labeller = label_wrap_gen()
) +
coord_flip() +
scale_color_manual(
values =
c(
"#5cbd55",
"#f56751"
)
) +
scale_y_continuous(
labels = function(x) paste0((x - 1) * 100, "%")
) +
theme(
panel.background = element_blank(),
panel.grid.major.x = element_line(color = "gray"),
strip.background = element_rect(color = "gray", fill = "white", linewidth = 1.2),
strip.text = element_text(size = 10, face = "italic"),
legend.title = element_blank(),
legend.text = element_text(size = 12, family = "Courier"),
legend.position = "top",
axis.text = element_text(size = 10),
axis.title = element_text(size = 14, family = "Courier"),
plot.title = element_text(size = 18, face = "bold.italic"),
plot.subtitle = element_text(size = 16, face = "italic"),
plot.title.position = "plot",
plot.caption = element_text(size = 7, face = "italic")
) +
xlab("State") +
ylab("Infection Rate Over Expected (95% CI)") +
labs(
title = "Top 5 Best/Worst U.S. States",
subtitle = "Hospital Associated Infections; CY 2021",
caption =
paste0(
"Best/worst hospitals ranked by the minimum/maximum of the upper/lower confidence limit, respectively",
"\n",
"Infection Rate Over Expected is 100 X (SIR - 1)",
"\n",
"SIR = Standardized Infection Ratio",
"\n",
"Data source: https://data.cms.gov/provider-data/dataset/k2ze-bqvw"
)
)
# Make the plotting data set
plot_dat <-
dat %>%
# For each measure
group_by(Measure) %>%
# Get the best SIR's (lowest)
slice_min(
n = n,
order_by = Upper,
with_ties = FALSE
) %>%
ungroup() %>%
# Add group indicator
add_column(
Group = "Best"
) %>%
# Bind with the worst states
bind_rows(
dat %>%
# For each measure
group_by(Measure) %>%
# Get the worst SIR's (highest)
slice_max(
n = n,
order_by = Lower,
with_ties = FALSE
) %>%
ungroup() %>%
# Add group indicator
add_column(
Group = "Worst"
)
)
## 1. Import and clean the dataset
dat <-
# Import dataset from website (Copied link from "Download full dataset")
read_csv(
file = "https://data.cms.gov/provider-data/sites/default/files/resources/b69e66780afdb7cbd0208ac9ae45d13e_1665414607/Healthcare_Associated_Infections-State.csv",
na = c("", "Not Available")
) %>%
# Filter to 50 U.S. states
filter(State %in% state.abb) %>%
# Parse out measures and components
mutate(
Component =
case_when(
str_detect(`Measure ID`, "LOWER") ~ "Lower",
str_detect(`Measure ID`, "UPPER") ~ "Upper",
str_detect(`Measure ID`, "SIR") ~ "Estimate"
),
Measure =
`Measure Name` %>%
str_remove_all(
pattern = ":.+"
) %>%
str_remove_all(
pattern = "\\s[(].+"
)
) %>%
# Send over the columns
pivot_wider(
id_cols =
c(
"State",
"Measure"
),
names_from = Component,
values_from = Score
)
# Example data
df <- data.frame(text = c("This is string1", "Another text with string1 but not string2", "No match here"))
df
# Strings to check
string1 <- "string1"
string2 <- "string2"
# Filter the dataframe
filtered_df <- df %>%
mutate(matched_str = case_when(
str_detect(text, string1) ~ "string1",
str_detect(text, string2) ~ "string2",
str_detect(text, string1) | str_detect(text, string2) ~ "string1, string2",
))
# View the result
print(separated_df)
filtered_df
install.packages("hexSticker")
library(hexSticker)
library(insight)
print_color("The text is Red", "red")
print_color("The text is Yellow", "yellow")
library(crayon)
cat(green("Your Text is GREEN"))
cat(white("Your Text is WHITE"))
cat(blue("Your Text is BLUE"))
cat(red("Your Text is RED"))
cat(underline("Underline"))
cat(bold("BOLD"))
cat(blurred("Blurred"))
cat(italic("Italic"))
cat(inverse("Inverse"))
cat(bold("This is the BOLD text"))
cat(italic("This is the BOLD text"))
library(crayon)
cat(italic("This is the Italic text"))
library(dplyr)
library(atrrr)
install.packages("atrrr")
library(atrrr)
# Authenticate first (switch out with your username)
bsky_username <- "samrit24.bsky.social"
# If you already have an app password:
bsky_app_pw <- "Nibir#2442"
auth(user=bsky_username, password=bsky_app_pw)
# If you already have an app password:
bsky_app_pw <- "Nibiru#2442"
auth(user=bsky_username, password=bsky_app_pw)
# Or be guided through the process
auth()
# Get the people you follow
f <- get_follows(actor=bsky_username, limit=Inf)
# Get just their handles
fh <- f$actor_handle
# Get who your follows are following
ff <-
fh |>
lapply(get_follows, limit=Inf) |>
setNames(fh)
# Make it a data frame
ffdf <- bind_rows(ff, .id="follow")
# Get who your follows are following
ff <-
fh |>
lapply(get_follows, limit=10000) |>
setNames(fh)
View(f)
# Get who your follows are following
ff <-
fh |>
lapply(get_follows, limit=100) |>
setNames(fh)
# Make it a data frame
ffdf <- bind_rows(ff, .id="follow")
# Get counts, removing ppl you already follow
ffcounts <-
ffdf |>
count(actor_handle, sort=TRUE) |>
anti_join(f, by="actor_handle") |>
filter(actor_handle!="handle.invalid")
# Join back to account info, add URL
ffcounts <-
ffdf |>
distinct(actor_handle, actor_name) |>
inner_join(x=ffcounts, y=_, by="actor_handle") |>
mutate(url=paste0("https://bsky.app/profile/",
actor_handle))
View(ffcounts)
# Optional, clean up and create a nice table
library(gt)
install.packages(c("gt", "glue"))
# Optional, clean up and create a nice table
library(gt)
library(glue)
top <- 20L
ffcounts |>
head(top) |>
rename(Handle=actor_handle, N=n, Name=actor_name) |>
mutate(Handle=glue("[{Handle}]({url})")) |>
mutate(Handle=lapply(Handle, gt::md)) |>
select(-url) |>
gt() |>
tab_header(
title=md(glue("**My top {top} follows' follows**")),
subtitle="Collected November 19, 2024") |>
tab_style(
style="font-weight:bold",
locations=cells_column_labels()
) |>
cols_align(align="left") |>
opt_row_striping(row_striping = TRUE)
top <- 100L
ffcounts |>
head(top) |>
rename(Handle=actor_handle, N=n, Name=actor_name) |>
mutate(Handle=glue("[{Handle}]({url})")) |>
mutate(Handle=lapply(Handle, gt::md)) |>
select(-url) |>
gt() |>
tab_header(
title=md(glue("**My top {top} follows' follows**")),
subtitle="Collected November 19, 2024") |>
tab_style(
style="font-weight:bold",
locations=cells_column_labels()
) |>
cols_align(align="left") |>
opt_row_striping(row_striping = TRUE)
ffcounts |>
head(top) |>
rename(Handle=actor_handle, N=n, Name=actor_name) |>
mutate(Handle=glue("[{Handle}]({url})")) |>
mutate(Handle=lapply(Handle, gt::md)) |>
select(-url) |>
gt() |>
tab_header(
title=md(glue("**My top {top} follows' follows**")),
subtitle="Collected November 21, 2024") |>
tab_style(
style="font-weight:bold",
locations=cells_column_labels()
) |>
cols_align(align="left") |>
opt_row_striping(row_striping = TRUE)
library(tidyverse)
library(tictoc)
library(beepr)
library(beepr)
tic()
for(i in 1:500){
Sys.sleep(0.01)
}
toc()
beep()
for(i in 1:6){
cat("The value of i is:", i)
cat("\r")
Sys.sleep(1)
}
for(i in 1:1000){
Sys.sleep(0.01)
if(i %in% seq(0,1000, by=100)){
cat("The value of i is:", i , "\r")
}
}
for(i in 1:6){
cat("The value of i is", i , "and we are at" , floor(i*100/6) , "% \r")
Sys.sleep(1)
}
my_progress_bar <- txtProgressBar(1,500, style = 3)
View(my_progress_bar)
for(i in 1:500){
setTxtProgressBar(my_progress_bar , i)
Sys.sleep(0.01)
}
for(i in 1:10){
if(i==1){start_time <- Sys.time()}
else{
elapsed_time <- Sys.time() - start_time
# Note that the 10 here must match the number of steps
total_time <- elapsed_time*10/i
remaining_time <- round(total_time-elapsed_time, digits=2)
Sys.sleep(1.5)
cat(paste("Remaining time:", remaining_time , "seconds"))
cat("\r")
}
}
for(i in 1:10){
if(i==1){start_time <- Sys.time()}
else{
elapsed_time <- Sys.time() - start_time
# Note that the 10 here must match the number of steps
total_time <- elapsed_time*10/i
remaining_time <- round(total_time-elapsed_time, digits=2)
Sys.sleep(1.5)
cat(paste("Remaining time:", remaining_time , "seconds"))
cat("\r")
}
}
for (i in 1:10) {
cat("\rProgress:", i, "/ 10")  # Overwrites the line each iteration
Sys.sleep(0.5)  # Pause to simulate a time-consuming task
}
for(i in 1:20){
if(i==1){start_time <- Sys.time()}
else{
elapsed_time <- Sys.time() - start_time
# Note that the 20 here must match the number of steps
total_time <- elapsed_time*20/i
remaining_time <- round(total_time-elapsed_time, digits=2)
finish_time <- Sys.time() + lubridate::seconds(remaining_time)
Sys.sleep(1.5)
cat(paste("Current time is", format(Sys.time() , "%r") ,
"and process will be finished at" , format(finish_time , "%r")))
cat("\r")
}
}
paste_collapse <- function(...){
paste0(... ,collapse="")
}
for(i in 1:15){
full_bar = cli::console_width()
bar_partial <- floor(i*full_bar/15)
space_width <- full_bar-bar_partial
# Make the bar as a series of '#' followed by a series of spaces.
bar <- paste_collapse(paste_collapse(rep("=",bar_partial)) , paste_collapse(rep(" ",space_width)))
# Add a vertical line to each end of the bar
bar <- paste_collapse("|", bar, "|")
# create your own message here. Don't make it too long!
message <- paste0( round(i*100/15), "% complete")
# pop a space on either side of the message.
message <- paste0(" ", message , " ")
# the message should be located at the midpoint of the bar
where_to_put_message <- floor((full_bar - str_length(message))*0.5)
# sub the message into the bar
str_sub(bar , where_to_put_message , where_to_put_message + str_length(message) ) <- message
Sys.sleep(0.4)
cat(bar , "\r")
rm(bar , full_bar , bar_partial, space_width, message)
}
"format(Sys.time(), '%a') - Fri"
format(Sys.time(), '%a')
format(Sys.time(), '%A')
format(Sys.time(), '%b')
format(Sys.time(), '%B')
format(Sys.time(), '%c')
format(Sys.time(), '%C')
format(Sys.time(), '%d')
format(Sys.time(), '%D')
format(Sys.time(), '%e')
format(Sys.time(), '%E')
format(Sys.time(), '%f')
format(Sys.time(), '%F')
format(Sys.time(), '%g')
format(Sys.time(), '%G')
format(Sys.time(), '%h')
format(Sys.time(), '%H')
format(Sys.time(), '%i')
format(Sys.time(), '%I')
format(Sys.time(), '%j')
format(Sys.time(), '%J')
format(Sys.time(), '%k')
format(Sys.time(), '%K')
format(Sys.time(), '%l')
format(Sys.time(), '%L')
format(Sys.time(), '%m')
format(Sys.time(), '%M')
format(Sys.time(), '%n')
format(Sys.time(), '%N')
format(Sys.time(), '%o')
format(Sys.time(), '%O')
format(Sys.time(), '%p')
format(Sys.time(), '%P')
format(Sys.time(), '%q')
format(Sys.time(), '%Q')
format(Sys.time(), '%r')
format(Sys.time(), '%R')
format(Sys.time(), '%s')
format(Sys.time(), '%S')
format(Sys.time(), '%t')
format(Sys.time(), '%T')
format(Sys.time(), '%u')
format(Sys.time(), '%U')
format(Sys.time(), '%v')
format(Sys.time(), '%V')
format(Sys.time(), '%w')
format(Sys.time(), '%W')
format(Sys.time(), '%x')
format(Sys.time(), '%X')
format(Sys.time(), '%y')
format(Sys.time(), '%Y')
format(Sys.time(), '%z')
format(Sys.time(), '%Z')
