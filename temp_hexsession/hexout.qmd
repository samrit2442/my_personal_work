---
execute:
  echo: false
params:
  temp_file_path: "package_data.rds"
resources:
  - images
embed-resources: true
---

```{r}
#| echo: false

library(fs)
library(tools)
library(base64enc)

# Read the package data from the temporary file
package_data <- readRDS(params$temp_file_path)
logopaths <- package_data$logopaths
urlsForlinks <- package_data$urls


# Encode images and get base64 strings
encoded_paths <- sapply(logopaths, hexsession::encode_image)

# Remove any NULL entries (failed encodings)
encoded_paths <- encoded_paths[!sapply(encoded_paths, is.null)]

# Ensure urlsForlinks matches the length of encoded_paths
urlsForlinks <- urlsForlinks[1:length(encoded_paths)]

# Convert the R vectors to JavaScript arrays
js_array_images <- paste0("const imagePaths = ", 
                   jsonlite::toJSON(encoded_paths, auto_unbox = TRUE), 
                   ";")
js_array_links <- paste0("const linkUrls = ", 
                   jsonlite::toJSON(urlsForlinks, auto_unbox = TRUE), 
                   ";")

# Make the JS arrays available to the HTML output
htmltools::tagList(
  htmltools::tags$script(js_array_images),
  htmltools::tags$script(js_array_links)
)
```

```{=html}
<div class="main">
  <div class="container" id="imageContainer">
    <!-- Images will be dynamically added here -->
  </div>
  <div class="attribution">
    created with <a href="https://github.com/luisdva/hexsession" target="_blank">hexsession</a>
  </div>
</div>

<style>
.main {
  position: relative;
  display: flex;
  --s: 100px;  /* size  */
  --m: 2px;    /* margin */
  --f: calc(1.732 * var(--s) + 4 * var(--m) - 1px);
}

.container {
  font-size: 0; /*disable white space between inline block element */
}

.container div {
  width: var(--s);
  margin: var(--m);
  height: calc(var(--s)*1.1547); 
  display: inline-block;
  font-size: initial;
  clip-path: polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%);
  background: #f0f0f0;  /* Light grey background */
  margin-bottom: calc(var(--m) - var(--s)*0.2885); 
  overflow: hidden;
  transition: all 0.3s ease;
}

.container::before {
  content: "";
  width: calc(var(--s)/2 + var(--m));
  float: left;
  height: 120%;
  shape-outside: repeating-linear-gradient(     
                   #0000 0 calc(var(--f) - 3px),      
                   #000  0 var(--f));
}

.container div img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: all 0.3s ease;
}

.container a {
  display: block;
  width: 100%;
  height: 100%;
}

/* Subtle hover effect */
.container div:hover {
  z-index: 1;
  transform: scale(1.05);  /* Reduced scale */
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);  /* Subtle shadow */
}

.container div:hover img {
  filter: brightness(1.1);  /* Slightly brighten the image */
}

.attribution {
  position: absolute;
  bottom: -44px;
  right: 40px;
  font-size: 0.8em;
  color: #666;
  background-color: rgba(255, 255, 255, 0.7);
  padding: 2px 5px;
  border-radius: 3px;
  z-index: 10;
  pointer-events: none;  /* Allows clicking through to underlying elements */
}

.attribution a {
  color: #0066cc;
  text-decoration: none;
  pointer-events: auto;  /* Re-enables clicking on the link */
}

.attribution a:hover {
  text-decoration: underline;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const container = document.getElementById('imageContainer');

  imagePaths.forEach((path, index) => {
    const div = document.createElement('div');
    const img = document.createElement('img');
    
    img.src = path;
    img.alt = 'Hexagon Image ' + (index + 1);
    
    if (linkUrls[index] && linkUrls[index] !== "NA") {
      // If there's a valid URL, wrap the image in a link
      const a = document.createElement('a');
      a.href = linkUrls[index];
      a.target = '_blank';  // Opens link in a new tab
      a.appendChild(img);
      div.appendChild(a);
    } else {
      // If there's no URL or it's "NA", just add the image without a link
      div.appendChild(img);
    }
    
    container.appendChild(div);
  });
});
</script>




```

